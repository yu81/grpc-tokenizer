# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import tokenization_pb2 as tokenization__pb2


class TokenizerStreamStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
        """Constructor.

        Args:
          channel: A grpc.Channel.
        """
        self.TokenizerStreamServer = channel.stream_stream(
            "/sample.TokenizerStream/TokenizerStreamServer",
            request_serializer=tokenization__pb2.TokenizeRequest.SerializeToString,
            response_deserializer=tokenization__pb2.TokenizeResponse.FromString,
        )


class TokenizerStreamServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def TokenizerStreamServer(self, request_iterator, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_TokenizerStreamServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "TokenizerStreamServer": grpc.stream_stream_rpc_method_handler(
            servicer.TokenizerStreamServer,
            request_deserializer=tokenization__pb2.TokenizeRequest.FromString,
            response_serializer=tokenization__pb2.TokenizeResponse.SerializeToString,
        )
    }
    generic_handler = grpc.method_handlers_generic_handler("sample.TokenizerStream", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


class TokenizerStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
        """Constructor.

        Args:
          channel: A grpc.Channel.
        """
        self.TokenizerServer = channel.unary_unary(
            "/sample.Tokenizer/TokenizerServer",
            request_serializer=tokenization__pb2.TokenizeRequest.SerializeToString,
            response_deserializer=tokenization__pb2.TokenizeResponse.FromString,
        )


class TokenizerServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def TokenizerServer(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_TokenizerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "TokenizerServer": grpc.unary_unary_rpc_method_handler(
            servicer.TokenizerServer,
            request_deserializer=tokenization__pb2.TokenizeRequest.FromString,
            response_serializer=tokenization__pb2.TokenizeResponse.SerializeToString,
        )
    }
    generic_handler = grpc.method_handlers_generic_handler("sample.Tokenizer", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


class TokenizerDetailStreamStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
        """Constructor.

        Args:
          channel: A grpc.Channel.
        """
        self.TokenizerDetailStreamServer = channel.stream_stream(
            "/sample.TokenizerDetailStream/TokenizerDetailStreamServer",
            request_serializer=tokenization__pb2.TokenizeRequest.SerializeToString,
            response_deserializer=tokenization__pb2.TokenizeDetailResponse.FromString,
        )


class TokenizerDetailStreamServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def TokenizerDetailStreamServer(self, request_iterator, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_TokenizerDetailStreamServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "TokenizerDetailStreamServer": grpc.stream_stream_rpc_method_handler(
            servicer.TokenizerDetailStreamServer,
            request_deserializer=tokenization__pb2.TokenizeRequest.FromString,
            response_serializer=tokenization__pb2.TokenizeDetailResponse.SerializeToString,
        )
    }
    generic_handler = grpc.method_handlers_generic_handler("sample.TokenizerDetailStream", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


class TokenizerDetailStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
        """Constructor.

        Args:
          channel: A grpc.Channel.
        """
        self.TokenizerDetailServer = channel.unary_unary(
            "/sample.TokenizerDetail/TokenizerDetailServer",
            request_serializer=tokenization__pb2.TokenizeRequest.SerializeToString,
            response_deserializer=tokenization__pb2.TokenizeDetailResponse.FromString,
        )


class TokenizerDetailServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def TokenizerDetailServer(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_TokenizerDetailServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "TokenizerDetailServer": grpc.unary_unary_rpc_method_handler(
            servicer.TokenizerDetailServer,
            request_deserializer=tokenization__pb2.TokenizeRequest.FromString,
            response_serializer=tokenization__pb2.TokenizeDetailResponse.SerializeToString,
        )
    }
    generic_handler = grpc.method_handlers_generic_handler("sample.TokenizerDetail", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
